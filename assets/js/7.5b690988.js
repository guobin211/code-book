(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{360:function(t,a,r){"use strict";r.r(a);var s=r(42),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"进程线程与协程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#进程线程与协程"}},[t._v("#")]),t._v(" 进程线程与协程")]),t._v(" "),r("h2",{attrs:{id:"简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("一个程序至少有一个进程和一个线程")])]),t._v(" "),r("li",[r("p",[t._v("父进程退出，子进程称成为孤儿进程，被init（linux）接管")])]),t._v(" "),r("li",[r("p",[t._v("协程比线程更轻量，属于用户级别")])])]),t._v(" "),r("h2",{attrs:{id:"进程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[t._v("#")]),t._v(" 进程")]),t._v(" "),r("p",[t._v("进程（process）是资源分配的基本单位。所有与该进程有关的资源，都被记录在进程控制块PCB中。")]),t._v(" "),r("p",[t._v("进程通过IPC进行通讯")]),t._v(" "),r("p",[t._v("创建子进程的方式有"),r("code",[t._v("fork")]),t._v(", "),r("code",[t._v("vfork")]),t._v(", "),r("code",[t._v("exec")])]),t._v(" "),r("h2",{attrs:{id:"线程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[t._v("#")]),t._v(" 线程")]),t._v(" "),r("p",[t._v("线程（thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。")]),t._v(" "),r("p",[t._v("同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。")]),t._v(" "),r("h2",{attrs:{id:"协程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#协程"}},[t._v("#")]),t._v(" 协程")]),t._v(" "),r("p",[t._v("协程（Coroutines）是一种比线程更加轻量级的存在，正如一个进程可以拥有多个线程一样，一个线程可以拥有多个协程")])])}),[],!1,null,null,null);a.default=v.exports}}]);